{"version":3,"sources":["axios.js","components/Post/Post.js","containers/Blog/FullPost/FullPost.js","containers/Blog/Posts/Posts.js","containers/Blog/Blog.js","hoc/AsyncComponent/AsyncComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["instance","axios","create","baseURL","defaults","headers","common","post","props","className","onClick","clicked","title","author","FullPost","state","loadedPost","deletePostHandler","delete","match","params","id","then","response","console","log","this","loadData","get","setState","data","style","textAlign","body","Component","Posts","posts","postedSelectedHandler","history","push","updatedPosts","slice","map","catch","error","key","path","url","exact","component","AsyncNewPost","importCompoenent","cmp","default","C","asyncComponent","Blog","auth","to","activeClassName","activeStyle","color","textDecoration","pathname","hash","search","render","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","interceptors","request","use","Promise","reject","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9f684e6b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://jsonplaceholder.typicode.com'\r\n});\r\n\r\ninstance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE';\r\n\r\nexport default instance;","import React from 'react';\n\nimport './Post.css';\n\nconst post = (props) => (\n    <article className=\"Post\" onClick={props.clicked}>\n        <h1>{props.title}</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">{props.author}</div>\n        </div>\n    </article>\n);\n\nexport default post;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nimport './FullPost.css';\n\nclass FullPost extends Component {\n    state = {\n        loadedPost: null\n    }\n    componentDidMount () {\n        console.log(this.props);\n        this.loadData();\n    }\n\n    componentDidUpdate () {\n        this.loadData();\n\n    }\n\n    loadData () {\n        if (this.props.match.params.id) {\n            if (!this.state.loadedPost || (this.state.loadedPost && this.state.loadedPost.id) !== +this.props.match.params.id) {\n                axios.get('/posts/' + this.props.match.params.id)\n                    .then(response => {\n                         console.log(response);\n                        this.setState({ loadedPost: response.data });\n                    });\n            }\n\n        }\n    }\n\n    deletePostHandler = () => {\n\n        axios.delete('/posts/' + this.props.match.params.id)\n        .then(response =>{\n            console.log(response)\n        } );\n    }\n\n    render() {\n        let post = <p style={{ textAlign: 'center' }}>Please select a Post!</p>;\n        if (this.props.match.params.id) {\n            post = <p style={{ textAlign: 'center' }}>Loading...</p>;\n        }\n        if (this.state.loadedPost) {\n            post = (\n                <div className=\"FullPost\">\n                    <h1>{this.state.loadedPost.title}</h1>\n                    <p>{this.state.loadedPost.body}</p>\n                    <div className=\"Edit\">\n                        <button className=\"Delete\" onClick={this.deletePostHandler}>Delete</button>\n                    </div>\n                </div>\n\n            );\n        }\n\n        return post;\n    }\n}\n\nexport default FullPost;","import React, { Component } from 'react';\r\nimport axios from '../../../axios';\r\nimport { Route } from 'react-router-dom';\r\n\r\n\r\nimport Post from '../../../components/Post/Post';\r\nimport './Posts.css';\r\nimport FullPost from '../FullPost/FullPost'; \r\n\r\n\r\nclass Posts extends Component {\r\n    state = {\r\n        posts: []\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n        axios.get('/posts ')\r\n            .then(response => {\r\n                const posts = response.data.slice(0, 4);\r\n                const updatedPosts = posts.map(post => {\r\n                    return {\r\n                        ...post,\r\n                        author: 'Ade' \r\n                    }\r\n                });\r\n                this.setState({ posts: updatedPosts });\r\n                // console.log(response)\r\n            })\r\n\r\n            .catch(error => {\r\n                console.log(error);\r\n                // this.setState({ error: true })\r\n            });\r\n        // this.setState\r\n    }\r\n\r\n    postedSelectedHandler = (id) => {\r\n        // this.props.history.push({ pathname: '/posts' + id});\r\n        this.props.history.push( '/posts/' + id);\r\n    }\r\n\r\n    render() {\r\n\r\n        let posts = <p style={{ textAlign: 'center'  }}> Something Went Wrong!</p>\r\n        if (!this.state.error) {\r\n            posts = this.state.posts.map(post => {\r\n                return (\r\n                // <Link to ={'/' + post.id} key={post.id} >\r\n                <Post\r\n                    key={post.id}\r\n                    title={post.title}\r\n                    author={post.author}\r\n                    clicked={() => this.postedSelectedHandler(post.id)}\r\n                />\r\n                // </Link>\r\n                );\r\n            } );\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n        \r\n            <section className=\"Posts\">\r\n                {posts}\r\n            </section>\r\n            <Route path={this.props.match.url + '/:id'}  exact component={FullPost} />\r\n            </div>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default Posts;","import React, { Component } from 'react';\nimport { Route, NavLink, Switch } from 'react-router-dom';\n\nimport './Blog.css';\nimport Posts from './Posts/Posts';\nimport asyncComponent from '../../hoc/AsyncComponent/AsyncComponent';\n// import NewPost from './NewPost/NewPost';\n\nconst AsyncNewPost = asyncComponent(() => {\n    return import('./NewPost/NewPost');\n});\n\nclass Blog extends Component {\n    state = {\n        auth: true\n    }\n    render() {\n        return (\n            <div className=\"Blog\">\n                <header>\n                    <nav>\n                        <ul>\n                            <li><NavLink\n                                to=\"/posts/\" exact\n                                activeClassName='my-active'\n                                activeStyle={{\n                                    color: '#fa923f',\n                                    textDecoration: 'underline'\n                                }}>Posts</NavLink></li>\n                            <li><NavLink to={{\n                                pathname: '/new-post',\n                                hash: '#submit',\n                                search: '?quick-submit=true'\n                            }}>New Post</NavLink></li>\n                        </ul>\n                    </nav>\n                </header>\n                {/*<Route path =\"/\" exact render={() => <h1>Home</h1>} />\n                <Route path =\"/\" render={() => <h1>Home 2</h1>} />*/ }\n\n                <Switch>\n\n                    {this.state.auth ? <Route path=\"/new-post\" component={AsyncNewPost} /> : null}\n                    <Route path=\"/posts\" component={Posts} />\n                    <Route render={() => <h1>Not Found</h1>} />\n                    {/* <Redirect from =\"/\" to =\"/posts\" /> */}\n                    {/* <Route path=\"/\" component={Posts} /> */}\n                    {/* <Route path=\"/:id\" exact component={FullPost} /> */}\n                </Switch>\n\n            </div>\n        );\n    }\n}\n\nexport default Blog;","import React, { Component} from 'react';\r\n\r\nconst asyncComponent = ( importCompoenent ) => {\r\n    return class extends Component {\r\n        state = {\r\n            component: null\r\n        }\r\n\r\n        componentDidMount () {\r\n            importCompoenent()\r\n            .then(cmp => {\r\n                this.setState({component: cmp.default});\r\n            });\r\n        }\r\n\r\n        render () {\r\n            const C = this.state.component;\r\n\r\n            return C ? <C { ...this.props} /> : null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default asyncComponent;","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <div className=\"App\">\n        <Blog />\n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport axios from 'axios';\n\n\naxios.defaults.baseURL = 'http://jsonplaceholder.typicode.com';\naxios.defaults.headers.common['Authorization'] = 'AUTH TOKEN';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\n\naxios.interceptors.request.use(request => {\n\n    console.log(request);\n    return request;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n\n    console.log(response);\n    return response;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}